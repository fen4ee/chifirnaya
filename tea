from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
import time

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
def start(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id] = {"pour_number": 1, "timer": 30}
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
    send_next_pour_message(update, context, user_id)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
def send_next_pour_message(update, context, user_id):
    keyboard = [[InlineKeyboardButton("üëå –ù–∞—á–∞—Ç—å –ø—Ä–æ–ª–∏–≤", callback_data="start_pour")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if "callback_query" in update.to_dict():
        update.callback_query.message.reply_text(
            "‚úÖ –ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–æ–ª–∏–≤—É?",
            reply_markup=reply_markup
        )
    else:
        context.bot.send_message(
            chat_id=user_id,
            text="‚úÖ –ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–æ–ª–∏–≤—É?",
            reply_markup=reply_markup
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è Telegram
    
    user_id = query.from_user.id
    if user_id not in user_data:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pour_number = user_data[user_id]["pour_number"]
    timer = user_data[user_id]["timer"]
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Ç–∞–π–º–µ—Ä–∞
    query.edit_message_text(
        text=f"ü´ñ –ü—Ä–æ–ª–∏–≤: {pour_number} | ‚è≥ –¢–∞–π–º–µ—Ä: {timer} —Å–µ–∫. –ñ–¥—ë–º..."
    )
    
    # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
    time.sleep(timer)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∏ –Ω–æ–º–µ—Ä –ø—Ä–æ–ª–∏–≤–∞
    user_data[user_id]["pour_number"] += 1
    user_data[user_id]["timer"] += 15
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π
    send_next_pour_message(update, context, user_id)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    TOKEN = "7762077638:AAFCDDV1wuEv35KMcKiGCzIUztmdFflrUAA"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(button, pattern="start_pour"))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
